#!/usr/bin/env groovy
import groovy.transform.Field

@Field def lib_repo_url = "https://github.com/devGnode/lib-repo-groovy.git" as String
@Field def git_repo_url = "https://github.com/devGnode/SeleniumJs.git" as String
@Field def testResult   = 0 as Integer

timestamps{
    parameters{
        string( name : "BRANCH", defaultValue: 'origin/develop', description: '' )
        string( name: "fileTest", defaultValue: 'test/test.js', description: '' )
        string( name: "VERSION", defaultValue: "", description: 'Deployment version')
    }

    node{

        stage("Clean Workspace"){
            println "[+] Cleaning Workspace"
            cleanWs();
        }

        docker.withRegistry('https://registry.hub.docker.com/', 'hub-docker') {

            docker.image('registry.hub.docker.com/marcotest01/jenkins_test01:v1.0').inside("-u root") {

                stage("Git Checkout"){
                    def branch = params.BRANCH.substring(params.BRANCH.indexOf("/")+1)
                    def file   = testFile.substring(testFile.indexOf("/")+1)

                    println "Checkout to ${branch} branch - ${file}"
                    sh "ls -la"
                    checkout scm
                   /*withCredentials([file( credentialsId: "${file}", variable: 'CHMOD_MAIN')]){
                        sh "cp ${CHMOD_MAIN} test/$file"
                        //sh 'chmod ugo+x ${CHMOD_MAIN}'
                    }*/
                }

                stage("Launched integration test"){
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        sh "npm install"
                        testResult = sh(script: "npm test", returnValue: true )
                         if( testResult == null ){
                            println "processing has terminate with code ${testResult}"
                         }else{
                            println "Failed deployment"
                            println "processing has terminate with code ${testResult}"
                         }
                    }
                }

                stage("NPM Deployment"){
                    if( testResult == null ){
                        def deploymentStatus = 0;

                        println "package deployment is in progress"
                        sh "cat package.json | sed 's/[0-9].*/${VERSION}/g' > out.json && mv --force out.json package.json"
                        sh "cat package.json | grep version"
                        sh "git add package.json && git commit -m 'Update - deployment version : ${VERSION}' && git push origin ${BRANCH}"

                        sh "npm --install ."
                        sh "npm login --registry=http://npm.registry.org/"
                        deploymentStatus = sh( script : "npm publish", returnValue: true )

                    }else{
                        error("Failed deployment")
                        println "Failed deployment"
                        println "processing has terminate with code ${testResult}"
                    }
                }
            }
        }
    }
}